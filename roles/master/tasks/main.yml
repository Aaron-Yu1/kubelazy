---
# tasks file for master
- name: Create some directory
  file: 
    name: ~/.kube
    state: directory
    mode: 0775

- name: get certs directory info
  stat:
    path: /etc/kubernetes/ssl
  register: ssl

- name: Creste a dir for certs
  file:
    path: /etc/kubernetes/ssl
    state: directory
  when: "ssl.stat.isreg is not defined"

- name: Copy binary file
  copy:
    src: bin/kubernetes/server/bin/{{ item }}
    dest: /usr/local/bin/
    mode: 0755
  with_items:
    - kube-apiserver
    - kube-scheduler
    - kube-controller-manager
    - kubectl

- name: Copy kubeconfig file
  copy: 
    src: certs/{{ item }} 
    dest: /etc/kubernetes/{{ item }}
  with_items:
    - kube-controller-manager.kubeconfig
    - kube-scheduler.kubeconfig

- name: Copy kubernetes certs
  copy:
    src: certs/{{ item }}
    dest: /etc/kubernetes/ssl/{{ item }}
  with_items:
    - ca.pem
    - ca-key.pem
    - kube-apiserver.pem
    - kube-apiserver-key.pem
    - aggregator-proxy.pem
    - aggregator-proxy-key.pem

- name: Copy service file
  template:
    src: "{{ item }}.j2" 
    dest: /etc/systemd/system/{{ item }}
  with_items:
    - kube-apiserver.service
    - kube-controller-manager.service
    - kube-scheduler.service

- name:  Start the service
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - kube-apiserver.service
    - kube-controller-manager.service
    - kube-scheduler.service

- name: Check the kube-apiserver service
  shell: "systemctl is-active kube-apiserver.service"
  register: api_status
  until: '"active" in api_status.stdout'
  retries: 10
  delay: 3

- name: Check the kube-controller-manager service
  shell: "systemctl is-active kube-controller-manager.service"
  register: cm_status
  until: '"active" in cm_status.stdout'
  retries: 8
  delay: 3

- name: Check the kube-scheduler service
  shell: "systemctl is-active kube-scheduler.service"
  register: sch_status
  until: '"active" in sch_status.stdout'
  retries: 8
  delay: 3

- name: Change the apiserver ip address in kubeconfig when the LB is enabled.
  lineinfile:
    dest: "certs/kubectl.kubeconfig"
    regexp: "^    server"
    line: "    server: https://{{ VIP_ADDRESS }}:{{ SECURE_PORT }}"
  when: "groups['ha']|length > 0"
  connection: local

- name: Copy kubeconfig file
  copy:
    src: certs/kubectl.kubeconfig
    dest: ~/.kube/config
    mode: 0400

- name: Get user:kubernetes role binding info
  shell: "kubectl get clusterrolebindings | grep kubelet-api-admin || echo 'notfound'"
  register: crb_info
  run_once: true

- name: Create user:kubernetes role binding
  shell: "kubectl create clusterrolebinding system:kubelet-api-admin \
          --clusterrole=system:kubelet-api-admin --user=kubernetes"
  run_once: true
  when: "'notfound' in crb_info.stdout"
